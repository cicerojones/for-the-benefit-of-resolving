* This is the first file
** start with a local project to track remotely
1. create a directory
2. create a file
3. initialize the directory as a git repo
4. stage the file
5. commit the changes
6. check your git status
7. create a new repository remotely (use Github's interface)
8. add a remote to your git project
   1. git remote add origin <URL>
9. push the existing repo up from the command line to the remote server (see below)
   1. git push -u origin master
   2. what could go wrong!
10. begin branching (see next)

#+BEGIN_SRC sh
git remote add origin git@github.com:cicerojones/for-the-benefit-of-resolving.git
#+END_SRC

What's this mean (as reported by magit when pushing up "unmerged" commits)?
#+BEGIN_SRC sh
git push -v origin master:refs/heads/master
#+END_SRC
** work with branches and multiple computers
1. you can "create branch" on bitbucket, but not github?
2. create and checkout a local branch
   1. you will be given options where to "start" the branch
      1. HEAD
      2. master [this the magit default]
      3. origin/master
   2. you must give the branch a name
** make changes on the development branch and share them with the master
1. make sure you know where/what branch you have checked out
2. make, stage and commit changes on a local branch
3. in magit, you will not see a remote for this local branch (in the status buffer)
4. so, switch to the master branch (checkout master)
   1. you may encounter errors if you've made changes in the interim that you haven't staged/committed things!
5. once master is checked out, merge in changes from your development branch
   1. in magit, you will see  options to "preview" merge
6. if you make any further changes while on master, you will need to merge them back to dev!
** clone the repo onto a different computer
1. on github you can click "clone" to get the URL
2. switch to the directory you want to be your "container"
3. magit-clone (is different from =git clone= or not?) using the copied URL
   1. many strange or bewildering things can happen here, mostly involving ssh configuration
** get ready to create conflicting changes
1. confirm what branch you are on for this new computer
2. make sure it has the most recent changes from the remote master
   1. note that magit and git may not be coordinated (on my crouton linux)
3. switched to the second computer, try to make a change that will not obviously "conflict"
   1. say, add on to the end of the document or file
** now set up the part of the file to make conflicting changes
1. check what branch you are on (use the dev) using the first computer
2. give a numbered item some meaningless content you will deviate from elsewhere
3. computer no. 1 on local branch says: yabba-dabba-do

